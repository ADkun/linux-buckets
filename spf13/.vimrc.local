"colorscheme badwolf
colorscheme badwolf
"colorscheme codedark
set wrap
set pastetoggle=<F9>
set nu
set nowrapscan
set t_ut= 
set matchtime=1
set novisualbell noerrorbells
set report=0
set noeb
set selection=exclusive

nnoremap <Leader>zr zR
nnoremap <Leader>zo zO
nnoremap <Leader>zm :set fdm=indent<Enter>zM
nnoremap <Leader>nhl :nohl<Enter>
nnoremap <Leader>ena :e ++enc=utf-8<Enter>
nnoremap <Leader>ens :e ++enc=cp936<Enter>
nnoremap <Leader>co :color codedark<Enter>:color badwolf<Enter>
nnoremap <Leader>cx ggdG
nnoremap <Leader>bw :bwipeout<Enter>
nnoremap cd :cd<space>

let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#formatter = 'unique_tail'

"Use :PlugInstall to install plugins via vim-plug
call plug#begin('~/.vim/plugged')
Plug 'https://github.com.cnpmjs.org/kien/rainbow_parentheses.vim'
Plug 'https://github.com.cnpmjs.org/junegunn/fzf', { 'dir': '~/.fzf', 'do': './install -all' }
Plug 'https://github.com.cnpmjs.org/junegunn/fzf.vim'
Plug 'https://github.com.cnpmjs.org/szw/vim-maximizer.git'
Plug 'https://github.com.cnpmjs.org/tomasiser/vim-code-dark'
Plug 'https://github.com.cnpmjs.org/junegunn/vim-peekaboo'
Plug 'https://github.com.cnpmjs.org/MattesGroeger/vim-bookmarks'
Plug 'https://github.com.cnpmjs.org/neoclide/coc.nvim', {'branch': 'release'}
Plug 'https://github.com.cnpmjs.org/voldikss/vim-floaterm'
Plug 'https://github.com.cnpmjs.org/prabirshrestha/vim-lsp'
Plug 'https://github.com.cnpmjs.org/junegunn/vim-easy-align'
Plug 'https://github.com.cnpmjs.org/google/vim-searchindex.git'
call plug#end()
"Plug 'https://github.com.cnpmjs.org/djoshea/vim-autoread.git'
"Plug 'https://github.com.cnpmjs.org/vim-scripts/RltvNmbr.vim.git'
"Plug 'https://github.com.cnpmjs.org/vim-scripts/AutoComplPop'

" vim-bookmarks
highlight BookmarkSign ctermbg=NONE ctermfg=160
highlight BookmarkLine ctermbg=194 ctermfg=NONE
let g:bookmark_sign = '♥'
let g:bookmark_highlight_lines = 1
let g:bookmark_center = 1
let g:bookmark_location_list = 1
let g:bookmark_display_annotation = 1
"nnoremap <Leader>ms :BookmarkSave 
"nnoremap <Leader>ml :BookmarkLoad 



"map <c-u> :Ack<space>

" new lines
nnoremap <Leader>nl o<ESC>
nnoremap <Leader>no O<ESC>

" fzf
nnoremap <Leader>fzf :FZF<Enter>
nnoremap <Leader>fb :Buffers<Enter>
nnoremap <Leader>ft :Tags<Enter>
nnoremap <Leader>fw :Windows<Enter>
nnoremap <Leader>fg :Ag<Enter>
nnoremap <Leader>fr :Rg<Enter>
nnoremap <Leader>fl :Lines<Enter>
nnoremap <Leader>fc :Colors<Enter>
nnoremap <Leader>fm :Marks<Enter>
let g:fzf_buffers_jump = 1
let g:fzf_commits_log_options = '--graph --color=always --format="%C(auto)%h%d %s %C(black)%C(bold)%cr"'
let g:fzf_tags_command = 'ctags -R'
let g:fzf_commands_expect = 'alt-enter,ctrl-x'
let g:fzf_preview_window = ['right:50%', 'ctrl-/']
" Mapping selecting mappings
nnoremap <leader><tab> <plug>(fzf-maps-n)
xmap <leader><tab> <plug>(fzf-maps-x)
omap <leader><tab> <plug>(fzf-maps-o)

" Insert mode completion
inoremap <c-x><c-k> <plug>(fzf-complete-word)
inoremap <c-x><c-p> <plug>(fzf-complete-path)
inoremap <c-x><c-l> <plug>(fzf-complete-line)
" Path completion with custom source command
"inoremap <expr> <c-x><c-f> fzf#vim#complete#path('fd')
inoremap <expr> <c-x><c-p> fzf#vim#complete#path('rg --files')

" Word completion with custom spec with popup layout option
inoremap <expr> <c-x><c-k> fzf#vim#complete#word({'window': { 'width': 0.2, 'height': 0.9, 'xoffset': 1 }})


command! -bang -nargs=* Rg
  \ call fzf#vim#grep(
  \   'rg --column --line-number --no-heading --color=always --smart-case -- '.shellescape(<q-args>), 1,
  \   fzf#vim#with_preview(), <bang>0)

command! -bang -nargs=* Files
  \ call fzf#vim#grep(
  \   'rg --files --color=always --smart-case -- '.shellescape(<q-args>), 1,
  \   fzf#vim#with_preview(), <bang>0)

function! RipgrepFzf(query, fullscreen)
  let command_fmt = 'rg --column --line-number --no-heading --color=always --smart-case -- %s || true'
  let initial_command = printf(command_fmt, shellescape(a:query))
  let reload_command = printf(command_fmt, '{q}')
  let spec = {'options': ['--phony', '--query', a:query, '--bind', 'change:reload:'.reload_command]}
  call fzf#vim#grep(initial_command, 1, fzf#vim#with_preview(spec), a:fullscreen)
endfunction

command! -nargs=* -bang RG call RipgrepFzf(<q-args>, <bang>0)

"command! -bang -nargs=? -complete=dir Files
    "\ call fzf#vim#files(<q-args>, {'options': ['--layout=reverse', '--info=inline', '--preview', '~/.vim/plugged/fzf.vim/bin/preview.sh {}']}, <bang>0)

function! s:fzf_statusline()
  "" Override statusline as you like
  highlight fzf1 ctermfg=161 ctermbg=251
  highlight fzf2 ctermfg=23 ctermbg=251
  highlight fzf3 ctermfg=237 ctermbg=251
  setlocal statusline=%#fzf1#\ >\ %#fzf2#fz%#fzf3#f
endfunction

autocmd! User FzfStatusLine call <SID>fzf_statusline()


" fileencodings
"set fileencodings=ucs-bom,utf-8,cp936,gb18030,gbk,gb2312,big5,euc-jp,euc-kr,latin1
set fileencodings=ucs-bom,utf-8,cp936,gb18030,gbk,gb2312,latin1

" Complete related omnifunc
if has("autocmd") && exists("+omnifunc") 
autocmd Filetype * 
\ if &omnifunc == "" | 
\ setlocal omnifunc=syntaxcomplete#Complete | 
\ endif 
endif

" Auto Complete
"autocmd VimEnter * AcpEnable

" Maximizer
nnoremap <Leader>m :MaximizerToggle!<CR>

" neoterm
"let g:neoterm_default_mod = 'vertical'
"let g:neoterm_size = 60
"let g:neoterm_autoinsert = 1
"let g:neoterm_shell = "/bin/zsh"
"nnoremap <c-q> :Ttoggle<CR>
"inoremap <c-q> <Esc>:Ttoggle<CR>
"tnoremap <c-q> <c-\><c-n>:Ttoggle<CR>

" theme codedark
"let g:airline_theme = 'codedark'
let g:airline_theme = 'badwolf'

" NERDTree
" 切换窗格焦点时，自动定位文件
" Start NERDTree and put the cursor back in the other window.
"autocmd VimEnter * NERDTree | wincmd p
"" Start NERDTree when Vim is started without file arguments.
"autocmd StdinReadPre * let s:std_in=1
"autocmd VimEnter * if argc() == 0 && !exists('s:std_in') | NERDTree | endif
"" Start NERDTree. If a file is specified, move the cursor to its window.
"autocmd VimEnter * NERDTree | if argc() > 0 || exists("s:std_in") | wincmd p | endif
"" Start NERDTree, unless a file or session is specified, eg. vim -S session_file.vim.
"autocmd VimEnter * if argc() == 0 && !exists('s:std_in') && v:this_session == '' | NERDTree | endif
"" Start NERDTree when Vim starts with a directory argument.
"autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists('s:std_in') |
    "\ execute 'NERDTree' argv()[0] | wincmd p | enew | execute 'cd '.argv()[0] | endif

"autocmd BufEnter * if &modifiable | NERDTreeFind | wincmd p | endif
"autocmd VimEnter * wincmd p

"设置树的显示图标
let g:NERDTreeDirArrowExpandable = '▸'
let g:NERDTreeDirArrowCollapsible = '▾'
"Making it prettier
let NERDTreeMinimalUI = 1
let NERDTreeDirArrows = 1

"others
"set clipboard=unnamedplus
vnoremap Y "+y
nnoremap P "+p
" AutoSave
"set autowriteall
"autocmd CursorHold,CursorHoldI * :update
set noswapfile

nnoremap <Leader>sr :set rnu<Enter>
nnoremap <Leader>snr :set nornu<Enter>
nnoremap <Leader>snn :set nonu<Enter>

" default scheme
"call ToggleBG()

" Fugitive
nnoremap <Leader>gg :Git<Enter>
nnoremap <Leader>gb :Git blame<Enter>
nnoremap <Leader>gd :Git diff<Enter>

" Buffer
nnoremap <Leader>bn :bn<Enter>
nnoremap <Leader>bb :bp<Enter>
"nnoremap <Leader>b1 :b1<Enter>
"nnoremap <Leader>b2 :b2<Enter>
"nnoremap <Leader>b3 :b3<Enter>
"nnoremap <Leader>b4 :b4<Enter>
"nnoremap <Leader>b5 :b5<Enter>
"nnoremap <Leader>b6 :b6<Enter>
"nnoremap <Leader>b7 :b7<Enter>
"nnoremap <Leader>b8 :b8<Enter>
"nnoremap <Leader>b9 :b9<Enter>
"nnoremap <Leader>b0 :b10<Enter>
"nnoremap <Leader>bq1 :b11<Enter>
"nnoremap <Leader>bq2 :b12<Enter>
"nnoremap <Leader>bq3 :b13<Enter>
"nnoremap <Leader>bq4 :b14<Enter>
"nnoremap <Leader>bq5 :b15<Enter>
"nnoremap <Leader>bq6 :b16<Enter>
"nnoremap <Leader>bq7 :b17<Enter>
"nnoremap <Leader>bq8 :b18<Enter>
"nnoremap <Leader>bq9 :b19<Enter>
"nnoremap <Leader>bq0 :b20<Enter>

" Tag List
nnoremap <Leader>ts :ts<Enter>
nnoremap <Leader>tn :tn<Enter>
nnoremap <Leader>tp :tp<Enter>

" RltvNmbr
"autocmd VimEnter * :RltvNmbr

" inner terminal
nnoremap <Leader>te :term<Enter>

nnoremap <Leader>cdc :cd %:h<Enter>
nnoremap <Leader>cdh :cd ..<Enter>:pwd<Enter>
nnoremap <Leader>cdj :cd ../..<Enter>:pwd<Enter>
nnoremap <Leader>cdk :cd ../../..<Enter>:pwd<Enter>
nnoremap <Leader>cdl :cd ../../../..<Enter>:pwd<Enter>
nnoremap <Leader>cf :f<Enter>
nnoremap <Leader>wd :pwd<Enter>

" exit
nnoremap <Leader>wq :wq!<Enter>
nnoremap <Leader>fq :q<Enter>
nnoremap <Leader>ww :w!<Enter>

" load file
nnoremap <Leader>l :e<Enter>

set fdm=indent

" Set internal encoding of vim, not needed on neovim, since coc.nvim using some
" unicode characters in the file autoload/float.vim
set encoding=utf-8

" TextEdit might fail if hidden is not set.
set hidden

" Some servers have issues with backup files, see #649.
set nobackup
set nowritebackup

" Give more space for displaying messages.
"set cmdheight=2

" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=100

" Don't pass messages to |ins-completion-menu|.
set shortmess+=c

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
if has("nvim-0.5.0") || has("patch-8.1.1564")
  " Recently vim can merge signcolumn and number column into one
  set signcolumn=number
else
  set signcolumn=yes
endif

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

" Make <CR> auto-select the first completion item and notify coc.nvim to
" format on enter, <cr> could be remapped by other vim plugin
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code.
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  "autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying codeAction to the current buffer.
nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)

" Run the Code Lens action on the current line.
nmap <leader>cl  <Plug>(coc-codelens-action)

" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

" Remap <C-f> and <C-b> for scroll float windows/popups.
"if has('nvim-0.4.0') || has('patch-8.2.0750')
  "nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  "nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
  "inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
  "inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
  "vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  "vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
"endif

" Use CTRL-S for selections ranges.
" Requires 'textDocument/selectionRange' support of language server.
nmap <silent> <C-s> <Plug>(coc-range-select)
xmap <silent> <C-s> <Plug>(coc-range-select)

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocAction('format')

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocActionAsync('runCommand', 'editor.action.organizeImport')

" Add (Neo)Vim's native statusline support.
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline.
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Mappings for CoCList
" Show all diagnostics.
nnoremap <nowait> <leader><space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions.
nnoremap <nowait> <leader><space>e  :<C-u>CocList extensions<cr>
" Show commands.
nnoremap <nowait> <leader><space>c  :<C-u>CocList commands<cr>
" Find symbol of current document.
nnoremap <nowait> <leader><space>o  :<C-u>CocList outline<cr>
" Search workspace symbols.
nnoremap <nowait> <leader><space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <nowait> <leader><space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <nowait> <leader><space>k  :<C-u>CocPrev<CR>
" Resume latest coc list.
nnoremap <nowait> <leader><space>p  :<C-u>CocListResume<CR>

nnoremap <nowait> <Leader>ccc :CocConfig<CR>
nnoremap <nowait> <Leader>cci :CocInstall<space>
nnoremap <nowait> <Leader>ccm :CocList marketplace<CR>

""""""""""""""vim-easy-align""""""""""""""
" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

""""""""""""""abolish""""""""""""""
nnoremap <Leader>sub :%Subvert/

